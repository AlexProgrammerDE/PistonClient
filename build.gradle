plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases/"
    }
    maven {
        name = "jitpack"
        url = 'https://jitpack.io'
    }
    maven {
        name = 'sponge-repo'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = 'sonatype-repo'
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    mavenCentral()
    google()
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Make a collection of all api modules we wish to use
    Set<String> apiModules = [
            "fabric-api-base",
            "fabric-command-api-v1",
            "fabric-lifecycle-events-v1",
            "fabric-key-binding-api-v1",
            "fabric-networking-api-v1",
            "fabric-registry-sync-v0"
    ]

    // Add each module as a dependency
    apiModules.forEach {
        include(modImplementation(fabricApi.module(it, project.fabric_version)))
    }

    modImplementation include("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    shadow modRuntimeOnly('com.github.JnCrMx:discord-game-sdk4j:v0.5')
    shadow modRuntimeOnly('commons-validator:commons-validator:1.7')
    shadow modRuntimeOnly("com.github.GeyserMC:MCProtocolLib:1.18-2")

    modImplementation include("com.terraformersmc:modmenu:3.0.1")
    modImplementation include("io.github.cottonmc:LibGui:5.3.0+1.18")

    modImplementation include('net.earthcomputer.multiconnect:multiconnect-api:1.5.10') {
        transitive = false
    }
    modRuntimeOnly include('net.earthcomputer.multiconnect:multiconnect:1.5.10') {
        transitive = false
    }

    modCompileOnly annotationProcessor('org.projectlombok:lombok:1.18.22')

    /*
    modImplementation include("com.github.cabaletta:baritone:v1.6.3") {
        exclude group: "org.lwjgl"
        exclude group: "org.lwjgl.lwjgl"
        exclude group: "net.java.jinput"
        exclude group: "net.sf.jopt-simple"
        exclude group: "org.ow2.asm"
    }*/

    modImplementation include("net.kyori:adventure-platform-fabric:5.0.0")

    /*


    implementation 'com.github.ZeroMemes:Alpine:1.9'
    implementation 'me.xdrop:fuzzywuzzy:1.3.1'

    */
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
}

remapJar {
    dependsOn shadowJar
    input.set shadowJar.archiveFile.get()
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}